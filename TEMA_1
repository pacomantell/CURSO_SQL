```pgsql
/* PARA EJECUTAR UNA PARTE DEL CODIGO SE SELECCIONA Y SE PULSA PLAY O F5*/

/*SENTENCIAS DDL (DATA DEFINITION LANGUAGE)*/
/*SENTENCIAS DML (DATA MANIPULATION LANGUAGE)
    OPERACIONES CRUD
        -C:CREATE->INSERT INTO
        -R:READ->SELECT FROM
        -U:UPDATE->UPDATE
        -D:DELETE->DELETE FROM
*/

--CREACION Y ELIMINACION DE BASE DE DATOS
CREATE DATABASE EJEMPLO;
DROP DATABASE EJEMPLO;

--CREACION DE TABLAS Y TIPOS DE DATOS
CREATE TABLE IF NOT EXISTS EJEMPLO(
    ID INT, --TIPO INT
    NAME VARCHAR(250), --TIPO VARCHAR, CHAR O TEXT (EL PARENTESIS ES LA LONGITUD)
    CASADO BOOLEAN, --TIPO BOOLEAN
    SALARY NUMERIC(15,2), --TIPO NUMERIC (EL PARENTESIS ME INDICA EL TAMAÃ‘O)
    BIRTH_DATE DATE, --TIPO DATE EN FORMATO AAAA-MM-DD
    TIEMPO TIME --TIPO TIEMPO
);

--INSERTAR DATOS
INSERT INTO EJEMPLO (ID, NAME, CASADO, SALARY, BIRTH_DATE, TIEMPO) 
    VALUES(1, 'MANOLO MARTINEZ', 'T',998.23, '1994-06-13', '08:00:00');

INSERT INTO EJEMPLO (ID, NAME, CASADO, SALARY, BIRTH_DATE, TIEMPO) 
    VALUES(2, 'PALOMINO CASARES', 'F', 10000.10, '1996-06-01', '10:00:00');
    
--VER DATOS DE UNA TABLA
SELECT * FROM EJEMPLO; --TODAS LAS COLUMNAS
SELECT ID FROM EJEMPLO; --UNA COLUMNA ESPECIFICA

--RENOMBRAR TABLA
ALTER TABLE IF EXISTS EJEMPLO4 RENAME TO EJEMPLO;

--AGREGAR COLUMNAS A LAS TABLAS
ALTER TABLE IF EXISTS EJEMPLO ADD COLUMN EMAIL VARCHAR(60);

--BORRAR COLUMNAS A LAS TABLAS
ALTER TABLE EJEMPLO DROP COLUMN IF EXISTS CASADO;

/*IDENTIFICADORES Y RESTRICCIONES*/
    --SERIAL
CREATE TABLE IF NOT EXISTS EJEMPLO2(
    ID SERIAL, --TIPO SERIAL (PSEUDOTIPO)
    NAME VARCHAR(250), 
    CASADO BOOLEAN, 
    SALARY NUMERIC(15,2), 
    BIRTH_DATE DATE, 
    TIEMPO TIME 
);

--INSERTAR DATOS CON TIPO SERIAL (NO ES NECESARIO INVOCAR ESA COLUMNA)
INSERT INTO EJEMPLO2 (NAME, CASADO, SALARY, BIRTH_DATE, TIEMPO) 
    VALUES('MANOLO MARTINEZ', 'T',998.23, '1994-06-13', '08:00:00');

INSERT INTO EJEMPLO2 (NAME, CASADO, SALARY, BIRTH_DATE, TIEMPO) 
    VALUES('PALOMINO CASARES', 'F', 10000.10, '1996-06-01', '10:00:00');
--AUNQUE SI SE ESPECIFICA EL ID PERMITE GENERAR EL REGISTRO, PERO PUEDE DUPLICARSE
INSERT INTO EJEMPLO2 (ID, NAME, CASADO, SALARY, BIRTH_DATE, TIEMPO) 
    VALUES(1, 'MANOLO MARTINEZ', 'T',998.23, '1994-06-13', '08:00:00');

SELECT * FROM EJEMPLO2;
/*EL SERIAL NO GARANTIZA QUE NO SE REPITAN REGISTROS, SOLO QUE SE GENERA UN ID AUTO PARA CADA ENTRADA NUEVA*/

    --PRIMARY KEY
CREATE TABLE IF NOT EXISTS EJEMPLO3(
    ID SERIAL PRIMARY KEY,
    NAME VARCHAR(250), 
    CASADO BOOLEAN, 
    SALARY NUMERIC(15,2), 
    BIRTH_DATE DATE, 
    TIEMPO TIME 
);

--INSERTAR DATOS CON PRIMARY KEY
INSERT INTO EJEMPLO3 (NAME, CASADO, SALARY, BIRTH_DATE, TIEMPO) 
    VALUES('MANOLO MARTINEZ', 'T',998.23, '1994-06-13', '08:00:00');

INSERT INTO EJEMPLO3 (NAME, CASADO, SALARY, BIRTH_DATE, TIEMPO) 
    VALUES('PALOMINO CASARES', 'F', 10000.10, '1996-06-01', '10:00:00');
--AHORA NO SE PUEDE REPETIR EL ID AUNQUE SE ESPECIFIQUE
INSERT INTO EJEMPLO3 (ID, NAME, CASADO, SALARY, BIRTH_DATE, TIEMPO) 
    VALUES(1, 'MANOLO MARTINEZ', 'T',998.23, '1994-06-13', '08:00:00');

SELECT * FROM EJEMPLO3;

--ESPECIFICAR ENTRADAS OBLIGATORIAS (NOT NULL)
CREATE TABLE IF NOT EXISTS EJEMPLO4(
    ID SERIAL PRIMARY KEY,
    NAME VARCHAR(250) NOT NULL, 
    CASADO BOOLEAN, 
    SALARY NUMERIC(15,2), 
    BIRTH_DATE DATE, 
    TIEMPO TIME 
);
--AL INSERTAR UNA NUEVA ENTRADA ME OBLIGA A INSERTAR EL NOMBRE
INSERT INTO EJEMPLO4 (NAME, CASADO, SALARY, BIRTH_DATE, TIEMPO) 
    VALUES('MANOLO MARTINEZ', 'T',998.23, '1994-06-13', '08:00:00');

    --COMPROBACION
INSERT INTO EJEMPLO4 (CASADO, SALARY, BIRTH_DATE, TIEMPO) 
    VALUES('T',998.23, '1994-06-13', '08:00:00');
    
SELECT * FROM EJEMPLO4;
    
--HACER QUE UN CAMPO SEA UNICO (UNIQUE)
CREATE TABLE IF NOT EXISTS EJEMPLO4(
    ID SERIAL PRIMARY KEY,
    NAME VARCHAR(250),
    EMAIL VARCHAR(100) UNIQUE,
    CASADO BOOLEAN, 
    SALARY NUMERIC(15,2), 
    BIRTH_DATE DATE, 
    TIEMPO TIME
    --SI TENEMOS VARIAS COLUMNAS CON LA MISMA RESTICCION SE PUEDEN PONER AQUI AL FINAL
        --UNIQUE(ID, NAME, EMAIL,...);
);

--AL INSERTAR UN EMAIL, ESTE SERA UNICO Y NO PODRA REPETIRSE
INSERT INTO EJEMPLO4 (NAME, EMAIL, CASADO, SALARY, BIRTH_DATE, TIEMPO) 
    VALUES('MANOLO MARTINEZ','MANOLO@EMAIL.COM', 'T',998.23, '1994-06-13', '08:00:00');
    --COMPROBACION
INSERT INTO EJEMPLO4 (NAME, EMAIL, CASADO, SALARY, BIRTH_DATE, TIEMPO) 
    VALUES('MANOLO MARTINEZ', 'MANOLO@EMAIL.COM', 'T',998.23, '1994-06-13', '08:00:00');
    
SELECT * FROM EJEMPLO4;

--COMPROBAR RANGOS DE DATOS (CHECK) (RESTRICCIONES EN CAMPOS O RANGOS)
CREATE TABLE IF NOT EXISTS EJEMPLO4(
    ID SERIAL PRIMARY KEY,
    NAME VARCHAR(250) NOT NULL, 
    CASADO BOOLEAN, 
    SALARY NUMERIC(15,2) CHECK (SALARY > 1000), 
    BIRTH_DATE DATE, 
    TIEMPO TIME 
);

--SI INTRODUCIMOS UNA ENTRADA CON SALARY MAYOR A LA CONDICION
INSERT INTO EJEMPLO4 (NAME, CASADO, SALARY, BIRTH_DATE, TIEMPO) 
    VALUES('PALOMINO CASARES', 'F', 10000.10, '1996-06-01', '10:00:00');

--PERO SI NO SE CUMPLE LA CONDICION NO NOS DEJA
INSERT INTO EJEMPLO4 (NAME, CASADO, SALARY, BIRTH_DATE, TIEMPO) 
    VALUES('MANOLO MARTINEZ', 'T',998.23, '1994-06-13', '08:00:00');

/*LAS RESTRICCIONES SE PUEDEN APLICAR A CUALQUIER TIPO DE DATOS*/

--BORRAR TABLA
DROP TABLE IF EXISTS EJEMPLO;
DROP TABLE IF EXISTS EJEMPLO2;
DROP TABLE IF EXISTS EJEMPLO3;
DROP TABLE IF EXISTS EJEMPLO4;
DROP TABLE IF EXISTS SENTENCIAS_BASICAS;

/*CARGAR BASE DE DATOS*/
--CREO UNA NUEVA BASE DE DATOS
CREATE DATABASE PAGILA;

--COMANDOS CMD (LA ABRO EN LA CARPETA DONDE TENGO LOS FICHEROS DE LA BASE DE DATOS)
  --CREO EL ESQUEMA
    /* psql -h localhost -p 5432 -U postgres -d pagila < pagila-schema.sql*/
    
  --CARGO LOS DATOS
    /* psql -h localhost -p 5432 -U postgres -d pagila < pagila-data.sql*/
    
```
